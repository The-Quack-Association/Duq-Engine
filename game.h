////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////Duq Engine/////////////////////////////////////
////////////////////////////////Core Game Functions/////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////#%&@@@@@@@&%#////////////////////////////////////
///////////////////////////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@%///////////////////////////
//////////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&//////////////////////
//////////////////#@&%@@@@@@@@@@@@@%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@%./////////////////
///////////////(@@%@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@&///////////////
/////////////@@@%@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,////////////
///////////@@@@&@@@@@@@@@@@@@@@@&@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#//////////
////////.@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*////////
///////&@@@@@@&&@@@@@@&@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&///////
//////%@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////
////,&@@@@@@@@@%@@@@@@@@@@&@@@&&@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////
///.&@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*///
///#@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%.//
///@@@@@@@@@@@@@@@@@@@@&%%@@@@@%#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,//
//#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(******#&@@@@@@@@@@@@@@@@@@@@@@@@@@%//
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*&@@@@@@@@@@@@@@%,&@@@@@@@@@@@@@@@@@@@@@&//
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(%@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@@@@@@@@@@//
//&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(&@@@@@@@@@@@@@@@@@@@@@@@@#%@@@@@@@@@@@@@@@@@&//
//(@@@@@@@@@#*,/&@@@@@@@@@@@@@@@@@@(&@@@@@@@@@@&/,,(@@@@@@@@@@@&(@@@@@@@@@@@@@@@@,//
// @@@@@@%.       .@@@@@@@@@@@@@@@%%@@@@@@@@@*        (@@@@@@@@@#&@@@@@@@@@@@@@@@,//
///.@@@@@/         #@@@@@@@@@@@@@@##@@@@@@@@&.        ,&@@@@@@@@%%@@@@@@@@@@@@@@////
////*@@@@&,       /@@@@@@@@@@@@@@@%%@@@@@@@@@#       .%@@@@@@@@@#&@@@@@@@@@@@@@#////
/////(@@@@@@@@&@@@@@@@@@@@@@@@@@@@@#&@@@@@@@@@@@@&&@@@@@@@@@@@@#%@@@@@@@@@@@@@&/////
//////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&/@@@@@@@@@@@@@@@@@@@@@@@@,@@@@@@@@@@@@@@&//////
////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%/@@@@@@@@@@@@@@@@@@@&/&@@@@@@@@@@@@@@,///////
/////////*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%,%@@@@@@@@@@@@#,&@@@@@@@@@@@@@@@#/////////
///////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&@@@*#@@@@@@@@@@@@@@@&///////////
/////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(.@@@@@@@@@@@@//////////////
////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@./@@@@@@&,////////////////
///////////////////*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*,////////////////////
///////////////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*///////////////////////
/////////////////////////////,&@@@@@@@@@@@@@@@@@@@@@@@//////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

// Imports the SFML libraries
#include <SFML/Graphics.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/Audio.hpp>
#include <SFML/Network.hpp>

// Include Graphical libraries
#include <GL/glew.h>
#include <stb/stb_image.h>
#include <SOIL/SOIL.h>

// Include other libraries
#include <iostream>
#include "usrfiles/camera.h"
#include "usrfiles/player.h"



// Variables
float red = 0;
float green = 0;
float blue = 0;
bool a = false;
float x_corner_top_left;
float y_corner_top_left;
float x_corner_bottom_right;
float y_corner_bottom_right;
int windowWidth;
int windowHeight;

void cameraInit(int X_POS, int Y_POS, int WIDTH, int HEIGHT) {

    windowWidth = WIDTH;
    windowHeight = HEIGHT;

    glViewport(X_POS, Y_POS, WIDTH, HEIGHT);

}

void missingBackground() {
    if (red <= 0) {
            a = true;
        } else if (red >= 1.0f) {
            a = false;
        }
        if (a) {
            red = red + 0.0001f;
            blue = blue + 0.0001f * (1.0f/0.863f);
        } else if (!a) {
            red = red - 0.0001f;
            blue = blue - 0.0001f * (1.0f/0.863f);
        }
}

/*
void loadTexture(std::string TEXTURE_LOCATION, int TEXTURE_ID) {

    sf::Image img_data;
    if (!img_data.loadFromFile(TEXTURE_LOCATION)) {
        error("Failed to load %s");
    }

    glEnable(GL_TEXTURE_2D);

    GLuint texture_object;
    glGenTextures(TEXTURE_ID, &texture_object);

    glBindTexture(GL_TEXTURE_2D, texture_object);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, img_data.getSize().x, img_data.getSize().y, 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data.getPixelsPtr());

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);

}
*/