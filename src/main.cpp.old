////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////Duq Engine/////////////////////////////////////
///////////////////////////////////Main Game File///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////#%&@@@@@@@&%#////////////////////////////////////
///////////////////////////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@%///////////////////////////
//////////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&//////////////////////
//////////////////#@&%@@@@@@@@@@@@@%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@%./////////////////
///////////////(@@%@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@&///////////////
/////////////@@@%@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,////////////
///////////@@@@&@@@@@@@@@@@@@@@@&@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#//////////
////////.@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*////////
///////&@@@@@@&&@@@@@@&@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&///////
//////%@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////
////,&@@@@@@@@@%@@@@@@@@@@&@@@&&@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/////
///.&@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*///
///#@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%.//
///@@@@@@@@@@@@@@@@@@@@&%%@@@@@%#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,//
//#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(******#&@@@@@@@@@@@@@@@@@@@@@@@@@@%//
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*&@@@@@@@@@@@@@@%,&@@@@@@@@@@@@@@@@@@@@@&//
//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(%@@@@@@@@@@@@@@@@@@@@##@@@@@@@@@@@@@@@@@@@@//
//&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(&@@@@@@@@@@@@@@@@@@@@@@@@#%@@@@@@@@@@@@@@@@@&//
//(@@@@@@@@@#*,/&@@@@@@@@@@@@@@@@@@(&@@@@@@@@@@&/,,(@@@@@@@@@@@&(@@@@@@@@@@@@@@@@,//
// @@@@@@%.       .@@@@@@@@@@@@@@@%%@@@@@@@@@*        (@@@@@@@@@#&@@@@@@@@@@@@@@@,//
///.@@@@@/         #@@@@@@@@@@@@@@##@@@@@@@@&.        ,&@@@@@@@@%%@@@@@@@@@@@@@@////
////*@@@@&,       /@@@@@@@@@@@@@@@%%@@@@@@@@@#       .%@@@@@@@@@#&@@@@@@@@@@@@@#////
/////(@@@@@@@@&@@@@@@@@@@@@@@@@@@@@#&@@@@@@@@@@@@&&@@@@@@@@@@@@#%@@@@@@@@@@@@@&/////
//////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&/@@@@@@@@@@@@@@@@@@@@@@@@,@@@@@@@@@@@@@@&//////
////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%/@@@@@@@@@@@@@@@@@@@&/&@@@@@@@@@@@@@@,///////
/////////*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%,%@@@@@@@@@@@@#,&@@@@@@@@@@@@@@@#/////////
///////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&@@@*#@@@@@@@@@@@@@@@&///////////
/////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(.@@@@@@@@@@@@//////////////
////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@./@@@@@@&,////////////////
///////////////////*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*,////////////////////
///////////////////////.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*///////////////////////
/////////////////////////////,&@@@@@@@@@@@@@@@@@@@@@@@//////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include "libraries.h"

int main(int argc, char** argv) {

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////CLI Arguments////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

    if (argc > 1) {

        info("Command Line Arguments:");
        extra("Count", std::to_string(argc));
        extra("Arguments Passed", "");

        for (int i = 1; i < argc; i++) {

            std::cout << argv[i] << std::endl;

        }

    }

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////Configure OpenGL//////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

    sf::ContextSettings settings;
    info("OpenGL Configured With These Settings:");
    settings.majorVersion = 4;
    settings.minorVersion = 6;
    std::cout << BOLDMAGENTA << "Version:" << WHITE << settings.majorVersion << "." << settings.minorVersion << "\n";
    settings.depthBits = 24;

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////Create Window///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

    sf::Window window(sf::VideoMode({windowWidth, windowHeight}), windowTitle);
    window.getSettings();

    info("Created Window With These Settings:");
    extra("Title", windowTitle);
    extra("Width", std::to_string(windowWidth));
    extra("Height", std::to_string(windowHeight));

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////Initialize GLAD//////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

    if (!gladLoadGL()) {

        // GLAD initialization failed 
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return -1; 

    }


////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////Create Objects///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

Player player(0.0f, 0.0f, 0.0f);

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////Game Loop//////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

    while (window.isOpen()) {

        while (const std::optional event = window.pollEvent()) {

            if (event->is<sf::Event::Closed>() || sf::Keyboard::isKeyPressed(sf::Keyboard::Key::Escape)) {

                window.close();

            }

        }

        //////////////////////////////
        // Clear the previous frame //
        //////////////////////////////

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        ////////////
        // Update //
        ////////////

        player.update();

        //////////
        // Draw //
        //////////

        player.draw();

        ////////////////////////
        // Render onto window //
        ////////////////////////

        glClearColor(0.2f, 0.2f, 0.26f, 1.0f);

        window.display();

    }

    return 0;

}